// SPDX-License-Identifier: MIT
pragma solidity ^0.8.26;

import "forge-std/Test.sol";
import "../src/DittoVulnerableVault.sol";

contract ExploitTest is Test {
    DittoVulnerableVault public vault;
    address public attacker = address(0x1337);
    address[4] public otherUsers;

    function setUp() public {
        // Deploy the VulnerableVault contract
        vault = new DittoVulnerableVault();

        // Setup other users
        otherUsers[0] = address(0x1);
        otherUsers[1] = address(0x2);
        otherUsers[2] = address(0x3);
        otherUsers[3] = address(0x4);

        // Other users deposit funds
        for (uint256 i = 0; i < 4; i++) {
            vm.prank(otherUsers[i]);
            vault.deposit(100 ether);
        }
    }

    function testExploit() public {
        uint256 initialBalance = vault.balances(attacker); // 0
        uint256 initialTotalSupply = vault.totalSupply(); // 4e20 (400 Eth)

        vm.startPrank(attacker);

        // TODO: CODE YOUR EXPLOIT HERE
        // HINT: Pay close attention to how fees are calculated and distributed.
        // You may want to use a combination of deposits, trades, and withdrawals.

        // Example (this won't solve the challenge, you need to write the exploit):
        uint256 totalDeposited = 500 ether;
        vault.deposit(totalDeposited);
        assertEq(vault.totalSupply(), initialTotalSupply + totalDeposited);
        console.log("Attacker Balance apos deposito:", vault.balances(attacker));
        console.log("Total Supply apos deposito", vault.totalSupply());

        for (uint256 i = 0; i < 50; i++) {
            vault.executeTrade(1 ether);
        }

        vault.deposit(totalDeposited);
        totalDeposited += 500 ether;

        // 4. Retirar tudo
        // uint256 withdrawBalance = vault.balances(attacker);
        // vault.withdraw(withdrawBalance);

        vm.stopPrank();

        // Retrieve the final balance after the exploit
        uint256 finalBalance = vault.balances(attacker);
        uint256 withdrawnAmount = finalBalance > initialBalance ? finalBalance - initialBalance : 0;

        // Victory check
        assertTrue(vault.checkVictory(attacker, initialBalance, withdrawnAmount));

        // Print the results
        uint256 profit = withdrawnAmount > 500 ether ? withdrawnAmount - 500 ether : 0;
        console.log("Initial total supply:", initialTotalSupply);
        console.log("Attacker's withdrawn amount:", withdrawnAmount);
        console.log("Profit:", profit);
        console.log("Profit percentage of initial total supply:", (profit * 100) / initialTotalSupply, "%");
    }
}
